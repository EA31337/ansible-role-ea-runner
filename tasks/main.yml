---
- name: Check platform (Linux)
  when: ansible_os_family != "Windows"
  block:
    - name: Install winbind package
      ansible.builtin.apt:
        allow_unauthenticated: true
        install_recommends: "{{ 'yes' if wine_install_recommends else 'no' }}"
        name: '{{ item }}'
        state: present
        update_cache: true
      become: true
      with_items:
        - winbind
    - name: Query MT platform path
      changed_when: false
      ansible.builtin.find:
        paths: '{{ ansible_env.HOME }}/.wine'
        patterns: >-
          '{{ mt_runner_mt_files[mt_runner_mt_version | int].terminal }}'
        recurse: true
      register: mt_path_terminal

- name: Set platform's path
  ansible.builtin.set_fact:
    mt_runner_mt_path: "{{ mt_path_terminal.files[0].path | dirname }}"

- name: Set platform's terminal path
  ansible.builtin.set_fact:
    mt_runner_mt_terminal_path: "{{ mt_path_terminal.files[0].path }}"

- name: Convert paths (Linux)
  when: ansible_os_family != "Windows"
  block:
    - name: Converts platform's path to Unix
      changed_when: false
      # noqa command-instead-of-shell
      ansible.builtin.shell: >-
        winepath {{ mt_runner_mt_path | quote }}
      environment:
        DISPLAY: "{{ xvfb_display }}"
      register: cmd_winepath_mt_path
    - name: Converts platform's terminal path to Unix
      changed_when: false
      # noqa command-instead-of-shell
      ansible.builtin.shell: >-
        winepath {{ mt_runner_mt_terminal_path | quote }}
      environment:
        DISPLAY: "{{ xvfb_display }}"
      register: cmd_winepath_mt_terminal_path
    - name: Set MT platform path 1 for Unix
      ansible.builtin.set_fact:
        mt_runner_mt_path: "{{ cmd_winepath_mt_path.stdout }}"
    - name: Set MT platform path 2 for Unix
      ansible.builtin.set_fact:
        mt_runner_mt_terminal_path: "{{ cmd_winepath_mt_terminal_path.stdout }}"


- name: Creates tester.ini
  ansible.builtin.template:
    dest: '{{ mt_runner_mt_path }}/tester.ini'
    mode: "0644"
    src: '{{ mt_runner_mt_version }}/tester.ini.j2'

- name: Run test
  block:
    - name: Run Terminal
      changed_when: false
      ansible.builtin.command:
        argv:
          - "{{ mt_runner_cmd_prefix }}"
          - "{{ mt_runner_mt_terminal_path }}"
          - /config:tester.ini
      args:
        chdir: '{{ mt_runner_mt_path }}'
      environment:
        DISPLAY: "{{ xvfb_display }}"
      register: cmd_terminal_res
  rescue:
    - name: Print message after failure
      ansible.builtin.debug:
        msg: Test failed!
    - name: Make sure all handlers run
      ansible.builtin.meta: flush_handlers
    - name: Prints logs
      block:
        - name: Finds all log files
          ansible.builtin.find:
            paths: "{{ mt_runner_mt_path }}"
            patterns: "*.log"
            recurse: true
          register: mt_log_files
        - name: Fetches log files
          ansible.builtin.slurp:
            src: "{{ item.path }}"
          loop: "{{ mt_log_files.files }}"
          register: mt_log_content
        - name: Prints log file
          ansible.builtin.debug:
            msg: "{{ lookup('decode_utf16', item.content) }}"
          loop: "{{ mt_log_content.results }}"
    - name: Fail
      ansible.builtin.command: /bin/false
      changed_when: false
  always:
    - name: Always do this
      ansible.builtin.debug:
        msg: This always executes
